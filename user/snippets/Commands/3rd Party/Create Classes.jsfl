/**Copyright (c) 2007 Tink Ltd | http://www.tink.wsPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associateddocumentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, andto permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portionsof the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.*/var comment = "/**\n *\n * This class was created with the 'Create Classes' command.\n *\n * You can edit this class by editing the symbol in the library of the corresponding FLA.\n *\n **/";  var classFormat = [ "\n\npackage ",			   "\n{\n\n	import ",			   "\n\n	public class ",			   " extends ",			   "\n	{\n\n		public function ",			   "()\n		{\n		}\n\n	}\n\n}" ];var generateURI;function locateURI(){	var docPath = document.path;	var defaultURI;	var definedURI;			if( docPath != undefined )	{		defaultURI = "file:///" + docPath.substr( 0, document.path.lastIndexOf( "/" ) );		definedURI = fl.getDocumentDOM().getDataFromDocument( "generateClassPath" );	}	else	{		defaultURI = undefined;		definedURI = undefined;	}	if( definedURI != null && definedURI != undefined && definedURI != "0" )	{		generateURI = definedURI;		loopThroughLibrary();	}	else	{		generateURI = defaultURI;		loopThroughLibrary();	}}function loopThroughLibrary(){	var library = document.library;	var numItems = library.items.length;	var item;	var itemType;	var baseClass;	for( var i = 0; i < numItems; i++ )	{		item = library.items[ i ];		if( item.linkageClassName != undefined )		{			itemType = item.itemType;			switch( itemType )			{				case "bitmap" :				{					baseClass = ( item.linkageBaseClass.length < 1 ) ? "flash.display.BitmapData" : item.linkageBaseClass;					createClass( baseClass, item.linkageClassName );					break;				}				case "movie clip" :				{					baseClass = ( item.linkageBaseClass.length < 1 ) ? "flash.display.MovieClip" : item.linkageBaseClass;					createClass( baseClass, item.linkageClassName );					break;				}				case "sound" :				{										baseClass = ( item.linkageBaseClass.length < 1 ) ? "flash.media.Sound" : item.linkageBaseClass;					createClass( baseClass, item.linkageClassName );					break;				}							}					}	}}function createClass( baseClass, linkageClass ){	var classProperties;	var packages = linkageClass.split( "." );	var className = packages.splice( packages.length - 1 )[ 0 ];	var baseClassPackages = baseClass.split( "." );	var baseClassName = baseClassPackages.splice( baseClassPackages.length - 1 )[ 0 ];	var currentPath = generateURI;	var packagePath = "";		if( packages.length )	{		for( var f = 0; f < packages.length; f++ )		{			currentPath +=  "/" + packages[ f ];			if( f != 0 ) packagePath += ".";			packagePath += packages[ f ];						FLfile.createFolder( currentPath );		}	}		classProperties = [ packagePath, baseClass + ";", className, baseClassName, className ];		var classString = comment + classFormat[ 0 ];	for( var c = 0; c < classProperties.length; c++ )	{		classString += classProperties[ c ];		classString += classFormat[ c + 1 ];	}	if( !FLfile.exists( currentPath + "/" + className + ".as" ) )	{		FLfile.write( currentPath + "/" + className + ".as", classString );	}}var document = fl.getDocumentDOM();if( document != null ){	locateURI();}else{	fl.trace( "Error: No FLA is open" );}