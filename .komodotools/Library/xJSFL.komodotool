{
  "keyboard_shortcut": "", 
  "name": "xjsfl", 
  "language": "JavaScript", 
  "trigger_enabled": 1, 
  "value": [
    "/**", 
    " * Get all the views in the correct order, so the first tab can be run", 
    " */", 
    "getOrderedViews = function()", 
    "{", 
    "\t// get tabbox, tabs and panels", 
    "\t", 
    "\t\t// view", 
    "\t\t\tvar view = ko.views.manager.currentView;", 
    "\t\t\t", 
    "\t\t// tabbox", 
    "\t\t\tvar tabbox = view.parentNode;", 
    "\t\t\twhile (tabbox && tabbox.nodeName != \"tabbox\" && tabbox.nodeName != \"xul:tabbox\")", 
    "\t\t\t{", 
    "\t\t\t\ttabbox = tabbox.parentNode;", 
    "\t\t\t}", 
    "\t\t", 
    "\t\t// tabs and panels", 
    "\t\t\tvar tabs\t\t= tabbox._tabs.childNodes", 
    "\t\t\tvar tabpanels\t= tabbox._tabpanels.childNodes", 
    "\t\t", 
    "\t\t", 
    "\t// get views and tabs in the correct order", 
    "\t", 
    "\t\t// views", 
    "\t\t\tvar views = {};", 
    "\t\t\tfor (var i = 0;  i < tabpanels.length; i++)", 
    "\t\t\t{", 
    "\t\t\t\tvar panel = tabpanels[i];", 
    "\t\t\t\tviews[panel.id] = panel.firstChild;", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t// tabs", 
    "\t\t\tvar orderedViews = [];", 
    "\t\t\tfor(var i = 0; i < tabs.length; i++)", 
    "\t\t\t{", 
    "\t\t\t\tvar tab = tabs[i];", 
    "\t\t\t\tvar view = views[tab.linkedPanel];", 
    "\t\t\t\tif(view && view.document)", 
    "\t\t\t\t{", 
    "\t\t\t\t\torderedViews.push(view)", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t// return", 
    "\t\treturn orderedViews;", 
    "}", 
    "", 
    "", 
    "/**", 
    " * TextFile object - reads and writes text files to disk", 
    " */", 
    "TextFile = function(pathOrURI, content)", 
    "{", 
    "\t// methods", 
    "\t\tthis.read = function()", 
    "\t\t{", 
    "\t\t\tthis.koFileEx.open(\"r\");", 
    "\t\t\tvar data = this.koFileEx.readfile();", 
    "\t\t\tthis.koFileEx.close();", 
    "\t\t\treturn data;", 
    "\t\t}", 
    "\t\t", 
    "\t\tthis.write = function(data, append)", 
    "\t\t{", 
    "\t\t\tthis.koFileEx.open(append ? 'a' : 'w');", 
    "\t\t\tthis.koFileEx.puts(data);", 
    "\t\t\tthis.koFileEx.close();", 
    "\t\t\treturn true", 
    "\t\t}", 
    "\t\t", 
    "\t\tthis.run = function()", 
    "\t\t{", 
    "\t\t\treturn ko.run.runEncodedCommand(window, '\"' + this.koFileEx.path + '\"');", 
    "\t\t}", 
    "\t\t", 
    "\t// constructor", 
    "\t\tthis.koFileEx = Components.classes[\"@activestate.com/koFileEx;1\"].createInstance(Components.interfaces.koIFileEx);", 
    "\t\tthis.koFileEx[ pathOrURI.indexOf('file:///')  == 0 ? 'URI' : 'path'] = pathOrURI;", 
    "\t\t", 
    "\t// variables", 
    "\t\t", 
    "\t// write to the file if content is supplied", 
    "\t\tif(content)", 
    "\t\t{", 
    "\t\t\tthis.write(content);", 
    "\t\t}", 
    "", 
    "}", 
    "", 
    "/*", 
    "\tFlash folders...", 
    "\tWindows Vista: \tboot drive\\Users\\username\\Local Settings\\Application Data\\Adobe\\Flash CS4\\language\\Configuration\\Commands", 
    "\tWindows XP: \tboot drive\\Documents and Settings\\user\\Local Settings\\Application Data\\Adobe\\Flash CS4\\language\\Configuration\\Commands", 
    "\tMac OS X:\t\tMacintosh HD/Users/userName/Library/Application Support/Adobe/Flash CS4/language/Configuration/Commands", 
    "*/", 
    "", 
    "/**", 
    " * xjsfl - library of functions needed to publish JSFL files", 
    " */", 
    "xjsfl =", 
    "{", 
    "\tgetFlashRoot:function(uri)", 
    "\t{", 
    "\t\treturn 'file:///E|/05%20-%20Commercial%20Projects/xJSFL/3%20-%20development/xJSFL/';", 
    "\t", 
    "\t\turi\t\t= uri || ko.views.manager.currentView.document.file.encodedURI;", 
    "\t\turi\t\t= this.getFlashURI(uri.substr(0, uri.lastIndexOf('xJSFL/') + 6));", 
    "\t\treturn uri;", 
    "\t},", 
    "\t", 
    "\tgetFlashURI:function(uri)", 
    "\t{", 
    "\t\treturn uri.replace(/\\/(\\w):/, '/$1|');", 
    "\t},", 
    "\t", 
    "\t/**", 
    "\t * Save the current JSFL file", 
    "\t */", 
    "\tsave:function(view)", 
    "\t{", 
    "\t\t// variables", 
    "\t\t\tvar doc\t\t= view.document;", 
    "\t\t\tvar file\t= doc.file;", 
    "\t\t\tvar saved\t= false;", 
    "\t\t\t", 
    "\t\t// save a new document if unsaved or new", 
    "\t\t\tif(file == null || doc.isUntitled)", 
    "\t\t\t{", 
    "\t\t\t\tif(view.saveAs())", 
    "\t\t\t\t{", 
    "\t\t\t\t\tsaved = true;", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t// otherwise, attempt to save existing document", 
    "\t\t\telse", 
    "\t\t\t{", 
    "\t\t\t\tif(doc.isDirty)", 
    "\t\t\t\t{", 
    "\t\t\t\t\ttry{doc.save(true);saved = true;}", 
    "\t\t\t\t\tcatch(err){saved = false;}", 
    "\t\t\t\t}", 
    "\t\t\t\telse", 
    "\t\t\t\t{", 
    "\t\t\t\t\tsaved = true;", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t// return", 
    "\t\t\treturn saved;", 
    "\t},", 
    "\t", 
    "\t/**", 
    "\t * Runs the file in the vanilla Flash environment", 
    "\t */", 
    "\trun:function(view)", 
    "\t{", 
    "\t\tvar uri\t= ko.uriparse.URIToPath(view.document.file.path);", 
    "\t\tko.run.runEncodedCommand(window, '\"' + uri + '\"');", 
    "\t},", 
    "\t", 
    "\t/**", 
    "\t * Starts the file / exec load process", 
    "\t */", 
    "\tlaunch: function(view, filename, template)", 
    "\t{", 
    "\t\t// variables", 
    "\t\t\tvar doc\t\t\t= view.document;", 
    "\t\t\tvar path\t\t= doc.file.path;", 
    "\t\t\tvar uri\t\t\t= this.getFlashURI(view.document.file.encodedURI);", 
    "\t\t\t", 
    "\t\t// get root", 
    "\t\t\tvar root\t\t= this.getFlashRoot();", 
    "\t\t", 
    "\t\t// file and exec variables", 
    "\t\t\tvar exec\t\t= root + 'core/jsfl/run/exec.jsfl';", 
    "\t\t\tvar file\t\t= root + 'core/jsfl/run/' +filename+ '.jsfl';", 
    "\t\t\t", 
    "\t\t// command", 
    "\t\t\tcommand\t\t\t= template.replace('{uri}', uri);", 
    "\t\t\t", 
    "\t\t// write the run-file info to exec", 
    "\t\t\tnew TextFile(exec).write(command);", 
    "", 
    "\t\t// run the exec file", 
    "\t\t\tfile\t\t\t= ko.uriparse.URIToPath(file);", 
    "\t\t\tko.run.runEncodedCommand(window, '\"' + file + '\"');", 
    "\t}", 
    "\t", 
    "}", 
    "", 
    "commandOutput('> xJSFL: initialised');"
  ], 
  "trigger": "trigger_startup", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": 1, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/address-book-blue.png"
}