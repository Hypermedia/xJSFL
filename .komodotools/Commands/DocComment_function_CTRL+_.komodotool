{
  "keyboard_shortcut": "Ctrl+`", 
  "name": "DocComment function (CTRL+`)", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "// -----------------------------------------------------------------------------", 
    "// setup", 
    "", 
    "\tkomodo.assertMacroVersion(3);", 
    "", 
    "// -----------------------------------------------------------------------------", 
    "// comment functions", 
    "", 
    "\t// variables", 
    "\t\tconst EOL =  [\"\\r\\n\", \"\\n\", \"\\r\"][document.getElementById(\"runoutput-scintilla\").scimoz.eOLMode];", 
    "", 
    "\t// storage for function components", 
    "\t\tvar parts\t= [];", 
    "\t", 
    "\t// datatypes", 
    "\t\t/**", 
    "\t\t * A Type datatype, that represent a @param, @return value or such like", 
    "\t\t * @param\ttype\t", 
    "\t\t * @param\tname\t", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction Type(type, name)", 
    "\t\t{", 
    "\t\t\tthis.type\t\t= type ? '@' + type : '';", 
    "\t\t\tthis.name\t\t= name ? name.replace() : '';", 
    "\t\t\t", 
    "\t\t\tif(this.name.match)", 
    "\t\t\t{", 
    "\t\t\t\t", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\tthis.toString\t= function()", 
    "\t\t\t{", 
    "\t\t\t\treturn this.type + '\t' + this.name + '\t';", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t", 
    "\t\t/**", 
    "\t\t * A Line datatype, that represents a single line in a comment block", 
    "\t\t * @param\ttext\t", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction Line(text)", 
    "\t\t{", 
    "\t\t\tthis.text\t\t= text || '';", 
    "\t\t\t", 
    "\t\t\tthis.toString\t= function()", 
    "\t\t\t{", 
    "\t\t\t\treturn this.text;", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t", 
    "\t// processing functions", 
    "\t\t/**", 
    "\t\t * Adds a type to the comment block, such as a paramater", 
    "\t\t * @param\ttype\t", 
    "\t\t * @param\tname\t", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction addType(type, name)", 
    "\t\t{", 
    "\t\t\tparts.push(new Type(type, name));", 
    "\t\t}", 
    "\t\t", 
    "\t\t/**", 
    "\t\t * Adds a single line to the comment block", 
    "\t\t * @param\ttext\t", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction addLine(text)", 
    "\t\t{", 
    "\t\t\tparts.push(new Line(text));", 
    "\t\t}", 
    "\t\t", 
    "\t\t/**", 
    "\t\t * Parses the selection made by the main function", 
    "\t\t * @param\tsel\t", 
    "\t\t * @returns\t\t", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction parse(sel)", 
    "\t\t{", 
    "\t\t\tvar rx\t\t\t= /^([\\t ]*).*function\\b.*\\(([^)]*)\\)/;", 
    "\t\t\tvar matches\t\t= sel.match(rx);", 
    "\t\t\tif(matches)", 
    "\t\t\t{", 
    "\t\t\t\treturn {indent:matches[1], params:matches[2].split(/,\\s*/)};", 
    "\t\t\t}", 
    "\t\t\treturn null;", 
    "\t\t}", 
    "\t\t", 
    "\t\t/**", 
    "\t\t * Builds the comment block from the passed-in params", 
    "\t\t * @param\tparams\tAn array of types", 
    "\t\t * @param\tauthor\tAn optional author", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction build(params, author)", 
    "\t\t{", 
    "\t\t\t// variables", 
    "\t\t\t\tauthor = author || Components.classes[\"@mozilla.org/process/environment;1\"].getService(Components.interfaces.nsIEnvironment).get('USERNAME');", 
    "\t\t\t", 
    "\t\t\t// name", 
    "\t\t\t\taddLine();", 
    "\t\t\t\t", 
    "\t\t\t// params", 
    "\t\t\t\tfor (var i=0; i < params.length; i++)", 
    "\t\t\t\t{", 
    "\t\t\t\t\taddType('param', params[i]);", 
    "\t\t\t\t}", 
    "\t\t\t\t", 
    "\t\t\t// return", 
    "\t\t\t\taddType('returns', '');", 
    "\t\t\t\t", 
    "\t\t\t// author", 
    "\t\t\t\t//addType('author', author);", 
    "\t\t\t\t", 
    "\t\t}", 
    "\t", 
    "\t\t/**", 
    "\t\t * ", 
    "\t\t * @param\tindent\t", 
    "\t\t * @returns\tThe full doc comment", 
    "\t\t * @author\tDave Stewart\t", 
    "\t\t */", 
    "\t\tfunction output(indent)", 
    "\t\t{", 
    "\t\t\t// variables", 
    "\t\t\t\tvar comment = '';", 
    "\t\t\t\t", 
    "\t\t\t// build", 
    "\t\t\t\tcomment += indent + '/**' + EOL;", 
    "\t\t\t\tfor (var i=0; i < parts.length; i++)", 
    "\t\t\t\t{", 
    "\t\t\t\t\tcomment += indent + ' * ' + parts[i].toString() + EOL;", 
    "\t\t\t\t}", 
    "\t\t\t\tcomment += indent +  ' */' + EOL;", 
    "\t\t\t\t", 
    "\t\t\t// return", 
    "\t\t\t\treturn comment;", 
    "\t\t}", 
    "\t\t", 
    "// -----------------------------------------------------------------------------", 
    "// main", 
    "", 
    "\t/**", 
    "\t * The main function that selects the text and creates the comment block", 
    "\t * @param\tauthor\tAn optional author to append to the end of the comment block", 
    "\t * @author\tDave Stewart\t", 
    "\t */", 
    "\tfunction main(author)", 
    "\t{", 
    "\t\t// stuff", 
    "\t\t\tif (komodo.view) { komodo.view.setFocus() };", 
    "\t\t\t", 
    "\t\t// editor variable", 
    "\t\t\tvar ke = komodo.editor;", 
    "\t\t\t", 
    "\t\t// select the line", 
    "\t\t\tkomodo.doCommand('cmd_end')", 
    "\t\t\tkomodo.doCommand('cmd_selectHome')", 
    "\t\t\tkomodo.doCommand('cmd_selectHome')", 
    "\t\t\t", 
    "\t\t// grab any selection", 
    "\t\t\ttry{sel = komodo.interpolate('%s'); }catch(err){}", 
    "\t\t\t", 
    "\t\t// parse the selection", 
    "\t\t\tvar matches\t= parse(sel);", 
    "\t\t\t", 
    "\t\t// if there's a match, create a doc comment", 
    "\t\t\tif(matches)", 
    "\t\t\t{", 
    "\t\t\t\t// build", 
    "\t\t\t\t\tbuild(matches.params, author);", 
    "\t\t\t\t\tvar comment = output(matches.indent);", 
    "\t\t\t\t\t", 
    "\t\t\t\t// insert", 
    "\t\t\t\t\tke.insertText(ke.currentPos, comment );", 
    "\t\t\t\t\t", 
    "\t\t\t\t// palce cursor in editing position", 
    "\t\t\t\t\tkomodo.doCommand('cmd_lineNext');", 
    "\t\t\t\t\tkomodo.doCommand('cmd_end')", 
    "\t\t\t\t", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t// otherwise, reset the selection", 
    "\t\t\telse", 
    "\t\t\t{", 
    "\t\t\t\tkomodo.doCommand('cmd_home')", 
    "\t\t\t}", 
    "\t\t\t\t\t", 
    "\t}", 
    "", 
    "// -----------------------------------------------------------------------------", 
    "// main", 
    "", 
    "\tmain();"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": false, 
  "type": "macro", 
  "icon": "chrome://fugue/skin/icons/edit-alignment.png"
}